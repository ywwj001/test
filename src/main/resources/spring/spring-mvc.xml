<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-4.0.xsd
         http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.2.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

    <!-- 配置Controller类的扫描 -->
    <context:component-scan base-package="com.redrain.controller,com.redrain.common.exception"/>
    <!-- 扫描注解 -->
    <task:annotation-driven/>
    <!-- 配置注解驱动 这个的作用是使用底层最新版的处理器映射器和处理器适配器，可以在底层做json的转换-->
    <mvc:annotation-driven >
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8" />
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!-- 对静态资源文件的访问，避免controller拦截 -->
    <mvc:default-servlet-handler/>

    <!--配置拦截器, 多个拦截器,顺序执行 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/"/>
            <mvc:exclude-mapping path="/login"/>
            <mvc:exclude-mapping path="/logout"/>
            <mvc:exclude-mapping path="/error"/>
            <mvc:exclude-mapping path="/index"/>
            <mvc:exclude-mapping path="/requestLogin"/>
            <mvc:exclude-mapping path="/requestLoginByWx"/>
            <mvc:exclude-mapping path="/getActionEntry"/>
            <bean class="com.redrain.interceptor.CommonInterceptor"/>
        </mvc:interceptor>
        <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
    </mvc:interceptors>


    <!-- 配置视图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--配置文件上传-->
    <!--    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">-->
    <!--        <property name="maxUploadSize" value="10485760"/>-->
    <!--        <property name="defaultEncoding" value="UTF-8"/>-->
    <!--    </bean>-->
    <!--    &lt;!&ndash;文件上传时，如果文件没有的话，就会出现爱你类型转换异常，所以自定义类处理&ndash;&gt;-->
    <bean id="conversionService"
          class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <list>
                <bean class="com.redrain.common.converter.SpringMVCLongConverter"/>
                <bean class="com.redrain.common.converter.SpringMVCDateConverter"/>
                <bean class="com.redrain.common.converter.SpringMVCFileConverter"/>
            </list>
        </property>
    </bean>
    <mvc:annotation-driven conversion-service="conversionService"/>

    <bean id="handlerExceptionResolver" class="com.redrain.common.exception.CustomerException"/>

    <!--    &lt;!&ndash; 扫描插件包内的监控模块 &ndash;&gt;-->
    <context:component-scan base-package="com.redrain.aspect"/>
    <!--开启AOP注解扫描-->
    <aop:aspectj-autoproxy/>
    <!--不管怎样设置，AOP在目标对象没有实现接口的情况下会使用cglib代理，在实现接口的情况下会使用jdk动态代理-->
    <aop:config proxy-target-class="true"/>
</beans>



